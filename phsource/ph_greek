
//====================================================
//  Greek  - based on base2
//====================================================


phoneme a/
  vowel starttype #@ endtype #@
  length 180
  FMT(vowel/a_4)
endphoneme

phoneme e
  vowel starttype #e endtype #e
  length 180
  FMT(vowel/e_mid2)
endphoneme

phoneme i
  vowel starttype #i endtype #i
  length 140
  IfNextVowelAppend(;)
  FMT(vowel/i)
endphoneme

phoneme o
  vowel starttype #o endtype #o
  length 180
  FMT(vowel/oo)
endphoneme



// CONSONANTS

phoneme t         // revert to alveolar /t/
  vls alv stop
  lengthmod 2
  voicingswitch d
  Vowelin f1=1  f2=1600 -300 300  f3=-100 80  amp=11
  Vowelout f1=0 f2=1600 -300 250  f3=-100 80  rms=20
  IF nextPh(isPause2) THEN
    WAV(ustop/t_)
  ENDIF
  WAV(ustop/t_short, 80)
endphoneme


phoneme d         // revert to alveolar /d/
  import_phoneme base/d
  voicingswitch t
endphoneme


phoneme k
  vls vel stop
  lengthmod 2
  voicingswitch g
  Vowelin f1=0  f2=2300 200 400  f3=-100 80
  Vowelout f1=0 f2=2300 300 400  f3=-100 80  rms=20

  IF nextPh(isPause2) THEN
    WAV(ustop/k_)
  ELIF nextPh(isRhotic) THEN
    WAV(ustop/kr)
  ELIF nextPh(l) THEN
    WAV(ustop/kl)
  ENDIF
  WAV(ustop/k_unasp, 70)
endphoneme


phoneme r   // this is [R] from Slovak/Czech
  liquid
  trill
  lengthmod 6
  ipa r
  Vowelin  f1=0  f2=1700 -300 300  f3=-300 80
  Vowelout f1=2  f2=1700 -300 300  f3=-300 80 brk
  FMT(r3/r_trill) addWav(r3/r_trill.wav, 50)
endphoneme
